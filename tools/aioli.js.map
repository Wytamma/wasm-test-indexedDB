{"version":3,"file":"aioli.js","sources":["../node_modules/comlink/dist/esm/comlink.mjs","../src/main.js"],"sourcesContent":["/**\r\n * Copyright 2019 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst proxyMarker = Symbol(\"Comlink.proxy\");\r\nconst createEndpoint = Symbol(\"Comlink.endpoint\");\r\nconst releaseProxy = Symbol(\"Comlink.releaseProxy\");\r\nconst throwMarker = Symbol(\"Comlink.thrown\");\r\nconst isObject = (val) => (typeof val === \"object\" && val !== null) || typeof val === \"function\";\r\n/**\r\n * Internal transfer handle to handle objects marked to proxy.\r\n */\r\nconst proxyTransferHandler = {\r\n    canHandle: (val) => isObject(val) && val[proxyMarker],\r\n    serialize(obj) {\r\n        const { port1, port2 } = new MessageChannel();\r\n        expose(obj, port1);\r\n        return [port2, [port2]];\r\n    },\r\n    deserialize(port) {\r\n        port.start();\r\n        return wrap(port);\r\n    },\r\n};\r\n/**\r\n * Internal transfer handler to handle thrown exceptions.\r\n */\r\nconst throwTransferHandler = {\r\n    canHandle: (value) => isObject(value) && throwMarker in value,\r\n    serialize({ value }) {\r\n        let serialized;\r\n        if (value instanceof Error) {\r\n            serialized = {\r\n                isError: true,\r\n                value: {\r\n                    message: value.message,\r\n                    name: value.name,\r\n                    stack: value.stack,\r\n                },\r\n            };\r\n        }\r\n        else {\r\n            serialized = { isError: false, value };\r\n        }\r\n        return [serialized, []];\r\n    },\r\n    deserialize(serialized) {\r\n        if (serialized.isError) {\r\n            throw Object.assign(new Error(serialized.value.message), serialized.value);\r\n        }\r\n        throw serialized.value;\r\n    },\r\n};\r\n/**\r\n * Allows customizing the serialization of certain values.\r\n */\r\nconst transferHandlers = new Map([\r\n    [\"proxy\", proxyTransferHandler],\r\n    [\"throw\", throwTransferHandler],\r\n]);\r\nfunction expose(obj, ep = self) {\r\n    ep.addEventListener(\"message\", function callback(ev) {\r\n        if (!ev || !ev.data) {\r\n            return;\r\n        }\r\n        const { id, type, path } = Object.assign({ path: [] }, ev.data);\r\n        const argumentList = (ev.data.argumentList || []).map(fromWireValue);\r\n        let returnValue;\r\n        try {\r\n            const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\r\n            const rawValue = path.reduce((obj, prop) => obj[prop], obj);\r\n            switch (type) {\r\n                case \"GET\" /* GET */:\r\n                    {\r\n                        returnValue = rawValue;\r\n                    }\r\n                    break;\r\n                case \"SET\" /* SET */:\r\n                    {\r\n                        parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\r\n                        returnValue = true;\r\n                    }\r\n                    break;\r\n                case \"APPLY\" /* APPLY */:\r\n                    {\r\n                        returnValue = rawValue.apply(parent, argumentList);\r\n                    }\r\n                    break;\r\n                case \"CONSTRUCT\" /* CONSTRUCT */:\r\n                    {\r\n                        const value = new rawValue(...argumentList);\r\n                        returnValue = proxy(value);\r\n                    }\r\n                    break;\r\n                case \"ENDPOINT\" /* ENDPOINT */:\r\n                    {\r\n                        const { port1, port2 } = new MessageChannel();\r\n                        expose(obj, port2);\r\n                        returnValue = transfer(port1, [port1]);\r\n                    }\r\n                    break;\r\n                case \"RELEASE\" /* RELEASE */:\r\n                    {\r\n                        returnValue = undefined;\r\n                    }\r\n                    break;\r\n                default:\r\n                    return;\r\n            }\r\n        }\r\n        catch (value) {\r\n            returnValue = { value, [throwMarker]: 0 };\r\n        }\r\n        Promise.resolve(returnValue)\r\n            .catch((value) => {\r\n            return { value, [throwMarker]: 0 };\r\n        })\r\n            .then((returnValue) => {\r\n            const [wireValue, transferables] = toWireValue(returnValue);\r\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\r\n            if (type === \"RELEASE\" /* RELEASE */) {\r\n                // detach and deactive after sending release response above.\r\n                ep.removeEventListener(\"message\", callback);\r\n                closeEndPoint(ep);\r\n            }\r\n        });\r\n    });\r\n    if (ep.start) {\r\n        ep.start();\r\n    }\r\n}\r\nfunction isMessagePort(endpoint) {\r\n    return endpoint.constructor.name === \"MessagePort\";\r\n}\r\nfunction closeEndPoint(endpoint) {\r\n    if (isMessagePort(endpoint))\r\n        endpoint.close();\r\n}\r\nfunction wrap(ep, target) {\r\n    return createProxy(ep, [], target);\r\n}\r\nfunction throwIfProxyReleased(isReleased) {\r\n    if (isReleased) {\r\n        throw new Error(\"Proxy has been released and is not useable\");\r\n    }\r\n}\r\nfunction createProxy(ep, path = [], target = function () { }) {\r\n    let isProxyReleased = false;\r\n    const proxy = new Proxy(target, {\r\n        get(_target, prop) {\r\n            throwIfProxyReleased(isProxyReleased);\r\n            if (prop === releaseProxy) {\r\n                return () => {\r\n                    return requestResponseMessage(ep, {\r\n                        type: \"RELEASE\" /* RELEASE */,\r\n                        path: path.map((p) => p.toString()),\r\n                    }).then(() => {\r\n                        closeEndPoint(ep);\r\n                        isProxyReleased = true;\r\n                    });\r\n                };\r\n            }\r\n            if (prop === \"then\") {\r\n                if (path.length === 0) {\r\n                    return { then: () => proxy };\r\n                }\r\n                const r = requestResponseMessage(ep, {\r\n                    type: \"GET\" /* GET */,\r\n                    path: path.map((p) => p.toString()),\r\n                }).then(fromWireValue);\r\n                return r.then.bind(r);\r\n            }\r\n            return createProxy(ep, [...path, prop]);\r\n        },\r\n        set(_target, prop, rawValue) {\r\n            throwIfProxyReleased(isProxyReleased);\r\n            // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\r\n            // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\r\n            const [value, transferables] = toWireValue(rawValue);\r\n            return requestResponseMessage(ep, {\r\n                type: \"SET\" /* SET */,\r\n                path: [...path, prop].map((p) => p.toString()),\r\n                value,\r\n            }, transferables).then(fromWireValue);\r\n        },\r\n        apply(_target, _thisArg, rawArgumentList) {\r\n            throwIfProxyReleased(isProxyReleased);\r\n            const last = path[path.length - 1];\r\n            if (last === createEndpoint) {\r\n                return requestResponseMessage(ep, {\r\n                    type: \"ENDPOINT\" /* ENDPOINT */,\r\n                }).then(fromWireValue);\r\n            }\r\n            // We just pretend that `bind()` didn’t happen.\r\n            if (last === \"bind\") {\r\n                return createProxy(ep, path.slice(0, -1));\r\n            }\r\n            const [argumentList, transferables] = processArguments(rawArgumentList);\r\n            return requestResponseMessage(ep, {\r\n                type: \"APPLY\" /* APPLY */,\r\n                path: path.map((p) => p.toString()),\r\n                argumentList,\r\n            }, transferables).then(fromWireValue);\r\n        },\r\n        construct(_target, rawArgumentList) {\r\n            throwIfProxyReleased(isProxyReleased);\r\n            const [argumentList, transferables] = processArguments(rawArgumentList);\r\n            return requestResponseMessage(ep, {\r\n                type: \"CONSTRUCT\" /* CONSTRUCT */,\r\n                path: path.map((p) => p.toString()),\r\n                argumentList,\r\n            }, transferables).then(fromWireValue);\r\n        },\r\n    });\r\n    return proxy;\r\n}\r\nfunction myFlat(arr) {\r\n    return Array.prototype.concat.apply([], arr);\r\n}\r\nfunction processArguments(argumentList) {\r\n    const processed = argumentList.map(toWireValue);\r\n    return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];\r\n}\r\nconst transferCache = new WeakMap();\r\nfunction transfer(obj, transfers) {\r\n    transferCache.set(obj, transfers);\r\n    return obj;\r\n}\r\nfunction proxy(obj) {\r\n    return Object.assign(obj, { [proxyMarker]: true });\r\n}\r\nfunction windowEndpoint(w, context = self, targetOrigin = \"*\") {\r\n    return {\r\n        postMessage: (msg, transferables) => w.postMessage(msg, targetOrigin, transferables),\r\n        addEventListener: context.addEventListener.bind(context),\r\n        removeEventListener: context.removeEventListener.bind(context),\r\n    };\r\n}\r\nfunction toWireValue(value) {\r\n    for (const [name, handler] of transferHandlers) {\r\n        if (handler.canHandle(value)) {\r\n            const [serializedValue, transferables] = handler.serialize(value);\r\n            return [\r\n                {\r\n                    type: \"HANDLER\" /* HANDLER */,\r\n                    name,\r\n                    value: serializedValue,\r\n                },\r\n                transferables,\r\n            ];\r\n        }\r\n    }\r\n    return [\r\n        {\r\n            type: \"RAW\" /* RAW */,\r\n            value,\r\n        },\r\n        transferCache.get(value) || [],\r\n    ];\r\n}\r\nfunction fromWireValue(value) {\r\n    switch (value.type) {\r\n        case \"HANDLER\" /* HANDLER */:\r\n            return transferHandlers.get(value.name).deserialize(value.value);\r\n        case \"RAW\" /* RAW */:\r\n            return value.value;\r\n    }\r\n}\r\nfunction requestResponseMessage(ep, msg, transfers) {\r\n    return new Promise((resolve) => {\r\n        const id = generateUUID();\r\n        ep.addEventListener(\"message\", function l(ev) {\r\n            if (!ev.data || !ev.data.id || ev.data.id !== id) {\r\n                return;\r\n            }\r\n            ep.removeEventListener(\"message\", l);\r\n            resolve(ev.data);\r\n        });\r\n        if (ep.start) {\r\n            ep.start();\r\n        }\r\n        ep.postMessage(Object.assign({ id }, msg), transfers);\r\n    });\r\n}\r\nfunction generateUUID() {\r\n    return new Array(4)\r\n        .fill(0)\r\n        .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\r\n        .join(\"-\");\r\n}\n\nexport { createEndpoint, expose, proxy, proxyMarker, releaseProxy, transfer, transferHandlers, windowEndpoint, wrap };\n//# sourceMappingURL=comlink.mjs.map\n","import { wrap } from \"comlink\";\nimport AioliWorker from \"./worker?worker&inline\";\n\n// Constants\nconst URL_CDN_ROOT = \"https://biowasm.com/cdn/v3\";\nconst URL_CDN_ROOT_STG = \"https://stg.biowasm.com/cdn/v3\";\nconst CONFIG_DEFAULTS = {\n\t// Biowasm CDN URLs\n\turlCDN: URL_CDN_ROOT,\n\turlCDNStg: URL_CDN_ROOT_STG,\n\n\t// Folder to use for mounting the shared filesystem\n\tdirShared: \"/shared\",\n\t// Folder to use for mounting File/Blob objects to the virtual file system\n\tdirMounted: \"/mnt\",\n\t// Folder to use for symlinks (basically, we make a symlink to each file mounted on WORKERFS\n\t// so that operations like \"samtools index\" don't crash due to the read-only nature of WORKERS).\n\t// Also mount URLs lazily in that folder.\n\tdirData: \"/data\",\n\t// Interleave stdout/stderr. If set to false, `.exec()` returns an object { \"stdout\": <text>, \"stderr\": <text> }\n\tprintInterleaved: true,\n\t// Stream stdout/stderr continuously to the main thread, instead of waiting for the WebWorker to finish running a command.\n\tprintStream: false,\n\n\t// Callback function to run whenever we receive a message from the WebWorker with payload { type: \"biowasm\", value: ... }.\n\t// See <https://github.com/biowasm/biowasm/tree/main/tools/bhtsne> for an example of how this can be used to send regular updates\n\t// back to the main thread before callMain() is done running.\n\tcallback: null,\n\n\t// Debugging\n\tdebug: false,\n\tenv: \"prd\"\n};\n\n// Class: 1 object = 1 worker; user can decide if they want tools running in separate threads or all of them in one\nexport default class Aioli {\n\tconstructor(tools, config={}) {\n\t\tif(tools == null)\n\t\t\tthrow \"Expecting array of tools as input to Aioli constructor.\";\n\n\t\t// Parse user input\n\t\tif(!Array.isArray(tools))\n\t\t\ttools = [ tools ];\n\t\t// Overwrite default config if specified\n\t\tconfig = Object.assign({}, CONFIG_DEFAULTS, config);\n\t\t// For convenience, support \"<tool>/<version>\" or \"<tool>/<program>/<version>\" instead of object config\n\t\ttools = tools.map(this._parseTool);\n\t\t// If testing with different environment e.g. stg.biowasm.com\n\t\tif(config.env === \"stg\")\n\t\t\tconfig.urlCDN = config.urlCDNStg;\n\n\t\t// Set state\n\t\tthis.tools = tools;\n\t\tthis.config = config;\n\n\t\t// Handle callback (delete it because we can't send a function to the WebWorker)\n\t\tif(this.config.callback != null)\n\t\t\tthis.callback = this.config.callback;\n\t\tdelete this.config.callback;\n\n\t\treturn this.init();\n\t}\n\n\t// Initialize the WebWorker and the WebAssembly modules within it\n\tasync init() {\n\t\t// Create the WebWorker\n\t\tconst worker = new AioliWorker();\n\n\t\t// Listen for \"biowasm\" messages from the WebWorker\n\t\tif(this.callback)\n\t\t\tworker.onmessage = e => {\n\t\t\t\tif(e.data.type === \"biowasm\")\n\t\t\t\t\tthis.callback(e.data.value);\n\t\t\t}\n\n\t\tconst aioli = wrap(worker);\n\t\taioli.tools = this.tools;\n\t\taioli.config = this.config;\n\n\t\t// Initialize the tools inside the WebWorker\n\t\tawait aioli.init();\n\n\t\treturn aioli;\n\t}\n\n\t// Parse \"<tool>/<version>\" and \"<tool>/<program>/<version>\" into { \"tool\": <tool>, \"program\": <program>, \"version\": <version> }\n\t_parseTool(tool) {\n\t\t// If not a string, leave it as is\n\t\tif(typeof tool !== \"string\")\n\t\t\treturn tool;\n\n\t\t// Support \"<tool>/<version>\" and \"<tool>/<program>/<version>\"\n\t\tconst toolSplit = tool.split(\"/\");\n\t\tif(toolSplit.length != 2 && toolSplit.length != 3)\n\t\t\tthrow \"Expecting '<tool>/<version>' or '<tool>/<program>/<version>'\";\n\n\t\treturn {\n\t\t\ttool: toolSplit[0],\n\t\t\tprogram: toolSplit.length == 3 ? toolSplit[1] : toolSplit[0],\n\t\t\tversion: toolSplit[toolSplit.length - 1]\n\t\t};\n\t}\n}\n"],"names":["obj","returnValue","proxy","AioliWorker"],"mappings":";;;;AAYA,QAAM,cAAc,OAAO,eAAe;AAC1C,QAAM,iBAAiB,OAAO,kBAAkB;AAChD,QAAM,eAAe,OAAO,sBAAsB;AAClD,QAAM,cAAc,OAAO,gBAAgB;AAC3C,QAAM,WAAW,CAAC,QAAS,OAAO,QAAQ,YAAY,QAAQ,QAAS,OAAO,QAAQ;AAItF,QAAM,uBAAuB;AAAA,IACzB,WAAW,CAAC,QAAQ,SAAS,GAAG,KAAK,IAAI;AAAA,IACzC,UAAU,KAAK;AACX,YAAM,EAAE,OAAO,UAAU,IAAI,eAAc;AAC3C,aAAO,KAAK,KAAK;AACjB,aAAO,CAAC,OAAO,CAAC,KAAK,CAAC;AAAA,IACzB;AAAA,IACD,YAAY,MAAM;AACd,WAAK,MAAK;AACV,aAAO,KAAK,IAAI;AAAA,IACnB;AAAA,EACL;AAIA,QAAM,uBAAuB;AAAA,IACzB,WAAW,CAAC,UAAU,SAAS,KAAK,KAAK,eAAe;AAAA,IACxD,UAAU,EAAE,SAAS;AACjB,UAAI;AACJ,UAAI,iBAAiB,OAAO;AACxB,qBAAa;AAAA,UACT,SAAS;AAAA,UACT,OAAO;AAAA,YACH,SAAS,MAAM;AAAA,YACf,MAAM,MAAM;AAAA,YACZ,OAAO,MAAM;AAAA,UAChB;AAAA,QACjB;AAAA,MACS,OACI;AACD,qBAAa,EAAE,SAAS,OAAO,MAAK;AAAA,MACvC;AACD,aAAO,CAAC,YAAY,CAAA,CAAE;AAAA,IACzB;AAAA,IACD,YAAY,YAAY;AACpB,UAAI,WAAW,SAAS;AACpB,cAAM,OAAO,OAAO,IAAI,MAAM,WAAW,MAAM,OAAO,GAAG,WAAW,KAAK;AAAA,MAC5E;AACD,YAAM,WAAW;AAAA,IACpB;AAAA,EACL;AAIA,QAAM,mBAAmB,oBAAI,IAAI;AAAA,IAC7B,CAAC,SAAS,oBAAoB;AAAA,IAC9B,CAAC,SAAS,oBAAoB;AAAA,EAClC,CAAC;AACD,WAAS,OAAO,KAAK,KAAK,MAAM;AAC5B,OAAG,iBAAiB,WAAW,SAAS,SAAS,IAAI;AACjD,UAAI,CAAC,MAAM,CAAC,GAAG,MAAM;AACjB;AAAA,MACH;AACD,YAAM,EAAE,IAAI,MAAM,KAAM,IAAG,OAAO,OAAO,EAAE,MAAM,CAAE,EAAA,GAAI,GAAG,IAAI;AAC9D,YAAM,gBAAgB,GAAG,KAAK,gBAAgB,IAAI,IAAI,aAAa;AACnE,UAAI;AACJ,UAAI;AACA,cAAM,SAAS,KAAK,MAAM,GAAG,EAAE,EAAE,OAAO,CAACA,MAAK,SAASA,KAAI,OAAO,GAAG;AACrE,cAAM,WAAW,KAAK,OAAO,CAACA,MAAK,SAASA,KAAI,OAAO,GAAG;AAC1D,gBAAQ,MAAI;AAAA,UACR,KAAK;AACD;AACI,4BAAc;AAAA,YACjB;AACD;AAAA,UACJ,KAAK;AACD;AACI,qBAAO,KAAK,MAAM,EAAE,EAAE,MAAM,cAAc,GAAG,KAAK,KAAK;AACvD,4BAAc;AAAA,YACjB;AACD;AAAA,UACJ,KAAK;AACD;AACI,4BAAc,SAAS,MAAM,QAAQ,YAAY;AAAA,YACpD;AACD;AAAA,UACJ,KAAK;AACD;AACI,oBAAM,QAAQ,IAAI,SAAS,GAAG,YAAY;AAC1C,4BAAc,MAAM,KAAK;AAAA,YAC5B;AACD;AAAA,UACJ,KAAK;AACD;AACI,oBAAM,EAAE,OAAO,UAAU,IAAI,eAAc;AAC3C,qBAAO,KAAK,KAAK;AACjB,4BAAc,SAAS,OAAO,CAAC,KAAK,CAAC;AAAA,YACxC;AACD;AAAA,UACJ,KAAK;AACD;AACI,4BAAc;AAAA,YACjB;AACD;AAAA,UACJ;AACI;AAAA,QACP;AAAA,MACJ,SACM,OAAP;AACI,sBAAc,EAAE,OAAO,CAAC,cAAc,EAAC;AAAA,MAC1C;AACD,cAAQ,QAAQ,WAAW,EACtB,MAAM,CAAC,UAAU;AAClB,eAAO,EAAE,OAAO,CAAC,cAAc,EAAC;AAAA,MAC5C,CAAS,EACI,KAAK,CAACC,iBAAgB;AACvB,cAAM,CAAC,WAAW,aAAa,IAAI,YAAYA,YAAW;AAC1D,WAAG,YAAY,OAAO,OAAO,OAAO,OAAO,IAAI,SAAS,GAAG,EAAE,IAAI,GAAG,aAAa;AACjF,YAAI,SAAS,WAAyB;AAElC,aAAG,oBAAoB,WAAW,QAAQ;AAC1C,wBAAc,EAAE;AAAA,QACnB;AAAA,MACb,CAAS;AAAA,IACT,CAAK;AACD,QAAI,GAAG,OAAO;AACV,SAAG,MAAK;AAAA,IACX;AAAA,EACL;AACA,WAAS,cAAc,UAAU;AAC7B,WAAO,SAAS,YAAY,SAAS;AAAA,EACzC;AACA,WAAS,cAAc,UAAU;AAC7B,QAAI,cAAc,QAAQ;AACtB,eAAS,MAAK;AAAA,EACtB;AACA,WAAS,KAAK,IAAI,QAAQ;AACtB,WAAO,YAAY,IAAI,CAAE,GAAE,MAAM;AAAA,EACrC;AACA,WAAS,qBAAqB,YAAY;AACtC,QAAI,YAAY;AACZ,YAAM,IAAI,MAAM,4CAA4C;AAAA,IAC/D;AAAA,EACL;AACA,WAAS,YAAY,IAAI,OAAO,CAAE,GAAE,SAAS,WAAY;AAAA,EAAA,GAAK;AAC1D,QAAI,kBAAkB;AACtB,UAAMC,SAAQ,IAAI,MAAM,QAAQ;AAAA,MAC5B,IAAI,SAAS,MAAM;AACf,6BAAqB,eAAe;AACpC,YAAI,SAAS,cAAc;AACvB,iBAAO,MAAM;AACT,mBAAO,uBAAuB,IAAI;AAAA,cAC9B,MAAM;AAAA,cACN,MAAM,KAAK,IAAI,CAAC,MAAM,EAAE,UAAU;AAAA,YAC1D,CAAqB,EAAE,KAAK,MAAM;AACV,4BAAc,EAAE;AAChB,gCAAkB;AAAA,YAC1C,CAAqB;AAAA,UACrB;AAAA,QACa;AACD,YAAI,SAAS,QAAQ;AACjB,cAAI,KAAK,WAAW,GAAG;AACnB,mBAAO,EAAE,MAAM,MAAMA;UACxB;AACD,gBAAM,IAAI,uBAAuB,IAAI;AAAA,YACjC,MAAM;AAAA,YACN,MAAM,KAAK,IAAI,CAAC,MAAM,EAAE,UAAU;AAAA,UACtD,CAAiB,EAAE,KAAK,aAAa;AACrB,iBAAO,EAAE,KAAK,KAAK,CAAC;AAAA,QACvB;AACD,eAAO,YAAY,IAAI,CAAC,GAAG,MAAM,IAAI,CAAC;AAAA,MACzC;AAAA,MACD,IAAI,SAAS,MAAM,UAAU;AACzB,6BAAqB,eAAe;AAGpC,cAAM,CAAC,OAAO,aAAa,IAAI,YAAY,QAAQ;AACnD,eAAO,uBAAuB,IAAI;AAAA,UAC9B,MAAM;AAAA,UACN,MAAM,CAAC,GAAG,MAAM,IAAI,EAAE,IAAI,CAAC,MAAM,EAAE,UAAU;AAAA,UAC7C;AAAA,QACH,GAAE,aAAa,EAAE,KAAK,aAAa;AAAA,MACvC;AAAA,MACD,MAAM,SAAS,UAAU,iBAAiB;AACtC,6BAAqB,eAAe;AACpC,cAAM,OAAO,KAAK,KAAK,SAAS;AAChC,YAAI,SAAS,gBAAgB;AACzB,iBAAO,uBAAuB,IAAI;AAAA,YAC9B,MAAM;AAAA,UAC1B,CAAiB,EAAE,KAAK,aAAa;AAAA,QACxB;AAED,YAAI,SAAS,QAAQ;AACjB,iBAAO,YAAY,IAAI,KAAK,MAAM,GAAG,EAAE,CAAC;AAAA,QAC3C;AACD,cAAM,CAAC,cAAc,aAAa,IAAI,iBAAiB,eAAe;AACtE,eAAO,uBAAuB,IAAI;AAAA,UAC9B,MAAM;AAAA,UACN,MAAM,KAAK,IAAI,CAAC,MAAM,EAAE,UAAU;AAAA,UAClC;AAAA,QACH,GAAE,aAAa,EAAE,KAAK,aAAa;AAAA,MACvC;AAAA,MACD,UAAU,SAAS,iBAAiB;AAChC,6BAAqB,eAAe;AACpC,cAAM,CAAC,cAAc,aAAa,IAAI,iBAAiB,eAAe;AACtE,eAAO,uBAAuB,IAAI;AAAA,UAC9B,MAAM;AAAA,UACN,MAAM,KAAK,IAAI,CAAC,MAAM,EAAE,UAAU;AAAA,UAClC;AAAA,QACH,GAAE,aAAa,EAAE,KAAK,aAAa;AAAA,MACvC;AAAA,IACT,CAAK;AACD,WAAOA;AAAA,EACX;AACA,WAAS,OAAO,KAAK;AACjB,WAAO,MAAM,UAAU,OAAO,MAAM,CAAA,GAAI,GAAG;AAAA,EAC/C;AACA,WAAS,iBAAiB,cAAc;AACpC,UAAM,YAAY,aAAa,IAAI,WAAW;AAC9C,WAAO,CAAC,UAAU,IAAI,CAAC,MAAM,EAAE,EAAE,GAAG,OAAO,UAAU,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;AAAA,EAC1E;AACA,QAAM,gBAAgB,oBAAI;AAC1B,WAAS,SAAS,KAAK,WAAW;AAC9B,kBAAc,IAAI,KAAK,SAAS;AAChC,WAAO;AAAA,EACX;AACA,WAAS,MAAM,KAAK;AAChB,WAAO,OAAO,OAAO,KAAK,EAAE,CAAC,cAAc,KAAI,CAAE;AAAA,EACrD;AAQA,WAAS,YAAY,OAAO;AACxB,eAAW,CAAC,MAAM,OAAO,KAAK,kBAAkB;AAC5C,UAAI,QAAQ,UAAU,KAAK,GAAG;AAC1B,cAAM,CAAC,iBAAiB,aAAa,IAAI,QAAQ,UAAU,KAAK;AAChE,eAAO;AAAA,UACH;AAAA,YACI,MAAM;AAAA,YACN;AAAA,YACA,OAAO;AAAA,UACV;AAAA,UACD;AAAA,QAChB;AAAA,MACS;AAAA,IACJ;AACD,WAAO;AAAA,MACH;AAAA,QACI,MAAM;AAAA,QACN;AAAA,MACH;AAAA,MACD,cAAc,IAAI,KAAK,KAAK,CAAE;AAAA,IACtC;AAAA,EACA;AACA,WAAS,cAAc,OAAO;AAC1B,YAAQ,MAAM,MAAI;AAAA,MACd,KAAK;AACD,eAAO,iBAAiB,IAAI,MAAM,IAAI,EAAE,YAAY,MAAM,KAAK;AAAA,MACnE,KAAK;AACD,eAAO,MAAM;AAAA,IACpB;AAAA,EACL;AACA,WAAS,uBAAuB,IAAI,KAAK,WAAW;AAChD,WAAO,IAAI,QAAQ,CAAC,YAAY;AAC5B,YAAM,KAAK;AACX,SAAG,iBAAiB,WAAW,SAAS,EAAE,IAAI;AAC1C,YAAI,CAAC,GAAG,QAAQ,CAAC,GAAG,KAAK,MAAM,GAAG,KAAK,OAAO,IAAI;AAC9C;AAAA,QACH;AACD,WAAG,oBAAoB,WAAW,CAAC;AACnC,gBAAQ,GAAG,IAAI;AAAA,MAC3B,CAAS;AACD,UAAI,GAAG,OAAO;AACV,WAAG,MAAK;AAAA,MACX;AACD,SAAG,YAAY,OAAO,OAAO,EAAE,MAAM,GAAG,GAAG,SAAS;AAAA,IAC5D,CAAK;AAAA,EACL;AACA,WAAS,eAAe;AACpB,WAAO,IAAI,MAAM,CAAC,EACb,KAAK,CAAC,EACN,IAAI,MAAM,KAAK,MAAM,KAAK,WAAW,OAAO,gBAAgB,EAAE,SAAS,EAAE,CAAC,EAC1E,KAAK,GAAG;AAAA,EACjB;;;;;;;;;;;ACrSA,QAAM,eAAe;AACrB,QAAM,mBAAmB;AACzB,QAAM,kBAAkB;AAAA,IAEvB,QAAQ;AAAA,IACR,WAAW;AAAA,IAGX,WAAW;AAAA,IAEX,YAAY;AAAA,IAIZ,SAAS;AAAA,IAET,kBAAkB;AAAA,IAElB,aAAa;AAAA,IAKb,UAAU;AAAA,IAGV,OAAO;AAAA,IACP,KAAK;AAAA,EACN;AAGe,QAAM,MAAM;AAAA,IAC1B,YAAY,OAAO,SAAO,IAAI;AAC7B,UAAG,SAAS;AACX,cAAM;AAGP,UAAG,CAAC,MAAM,QAAQ,KAAK;AACtB,gBAAQ,CAAE;AAEX,eAAS,OAAO,OAAO,CAAE,GAAE,iBAAiB,MAAM;AAElD,cAAQ,MAAM,IAAI,KAAK,UAAU;AAEjC,UAAG,OAAO,QAAQ;AACjB,eAAO,SAAS,OAAO;AAGxB,WAAK,QAAQ;AACb,WAAK,SAAS;AAGd,UAAG,KAAK,OAAO,YAAY;AAC1B,aAAK,WAAW,KAAK,OAAO;AAC7B,aAAO,KAAK,OAAO;AAEnB,aAAO,KAAK;IACZ;AAAA,IAGD,MAAM,OAAO;AAEZ,YAAM,SAAS,IAAIC;AAGnB,UAAG,KAAK;AACP,eAAO,YAAY,OAAK;AACvB,cAAG,EAAE,KAAK,SAAS;AAClB,iBAAK,SAAS,EAAE,KAAK,KAAK;AAAA,QAC3B;AAEF,YAAM,QAAQ,KAAK,MAAM;AACzB,YAAM,QAAQ,KAAK;AACnB,YAAM,SAAS,KAAK;AAGpB,YAAM,MAAM;AAEZ,aAAO;AAAA,IACP;AAAA,IAGD,WAAW,MAAM;AAEhB,UAAG,OAAO,SAAS;AAClB,eAAO;AAGR,YAAM,YAAY,KAAK,MAAM,GAAG;AAChC,UAAG,UAAU,UAAU,KAAK,UAAU,UAAU;AAC/C,cAAM;AAEP,aAAO;AAAA,QACN,MAAM,UAAU;AAAA,QAChB,SAAS,UAAU,UAAU,IAAI,UAAU,KAAK,UAAU;AAAA,QAC1D,SAAS,UAAU,UAAU,SAAS;AAAA,MACzC;AAAA,IACE;AAAA,EACF;;;"}